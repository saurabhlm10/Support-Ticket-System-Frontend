import ReactNode, { useEffect, useState } from "react";
import { courses } from "../courses";
import axios from "axios";
import { Autocomplete, TextField } from "@mui/material";
import Head from "next/head";

const create = () => {
  const [handlersArray, setHandlersArray] = useState([]);

  const [assignmentNotChecked, setAssignmentNotChecked] = useState(false)

  const [allHandlersList, setAllHandlersList] = useState([])

  const [issueType, setIssueType] = useState("No Access");
  const [linkToggler, setLinkToggler] = useState("Link");

  const getAllAgents = async () => {
    try {
      const response = await axios.get('/api/agent/getAllAgents')

      setAllHandlersList([...response.data.allAgentsList])

      const tempSpecialHandlersList = response.data.allAgentsList.filter(handler => handler.role === 'admin');
      const restHandlersList = response.data.allAgentsList.filter(handler => !tempSpecialHandlersList.includes(handler))

      setAllHandlersList([...tempSpecialHandlersList, ...restHandlersList])

    } catch (error) {
      console.log(error)
    }
  }

  useEffect(() => {
    getAllAgents()
    setIssueType('No-Access')
  }, [])


  useEffect(() => {
    let tempSpecialHandlersList;
    let restHandlersList;
    switch (issueType) {
      case 'No-Access':
      case 'Other':
      case 'Batch-Change':
        tempSpecialHandlersList = allHandlersList.filter(handler => handler.role === 'admin');
        restHandlersList = allHandlersList.filter(handler => !tempSpecialHandlersList.includes(handler))
        setAllHandlersList([...tempSpecialHandlersList, ...restHandlersList])
        break;
      case 'Assignment':
        tempSpecialHandlersList = allHandlersList.filter(handler => handler.role === 'assignment');
        restHandlersList = allHandlersList.filter(handler => !tempSpecialHandlersList.includes(handler))
        setAllHandlersList([...tempSpecialHandlersList, ...restHandlersList])
        break;
    }
  }, [issueType])



  return (
    <>
      <Head>
        <title>Create Ticket</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <h1 className="text-6xl text-center">Create Ticket</h1>
        <div className="flex justify-evenly ">
          <div className="flex flex-col gap-4 w-6/12">
            <h1 className="text-3xl ">Student Details</h1>
            <div className="mt-4 w-full border-2 flex justify-between">
              <label htmlFor="studentName" className="border-2">
                Student Name
              </label>
              <input type="text" name="studentName" className="border-2 w-2/3" />
            </div>
            <div className="w-full border-2 flex justify-between">
              <label htmlFor="studentEmail">Student Email</label>
              <input type="text" name="studentEmail" className="border-2 w-2/3" />
            </div>

            <div className="w-full border-2 flex justify-between">
              <label htmlFor="studentPhone">Student Phone</label>
              <input type="text" name="studentPhone" className="border-2 w-2/3" />
            </div>

            <div className="w-full border-2 flex justify-between">
              <label htmlFor="issueType">Issue Type</label>

              <select
                name="issueType"
                className="border-2 w-2/3"
                onChange={(e) => setIssueType(e.target.value)}
              >
                <option value="No-Access">No Access</option>
                <option value="Batch-Change">Batch Change</option>
                <option value="Assignment">Assignment</option>
                <option value="Other">Other</option>
              </select>
            </div>

            {issueType === "No-Access" && (
              <>
                <div className="w-full border-2 flex justify-between">
                  <label htmlFor="courseList">Course Name</label>

                  <input list="courseList" className="border-2 w-2/3" />
                  <datalist id="courseList">
                    {courses.map((courseName, id) => (
                      <option key={id} value={courseName}
                      />))}
                  </datalist>
                </div>
                <div>
                  <h1>{`Add ${linkToggler === "Link"
                    ? "Link"
                    : "Image Attachments"}`}</h1>
                  <p
                    className="cursor-pointer text-sm text-blue-500 inline-block"
                    onClick={() =>
                      linkToggler === "Link"
                        ? setLinkToggler("Images")
                        : setLinkToggler("Link")
                    }
                  >
                    {linkToggler === "Link"
                      ? "Add Image Attachments Instead"
                      : "Add Links Instead"}
                  </p>
                </div>

                {linkToggler === "Link" ? (
                  <>
                    <div className="w-full border-2 flex justify-between">
                      <label htmlFor="paymentReceiptLink">Payment Reciept</label>
                      <input
                        type="text"
                        name="paymentReceiptLink"
                        className="border-2 w-2/3"
                      />
                    </div>
                  </>
                ) : (
                  <>
                    <div className="w-full border-2 flex justify-between">
                      <label htmlFor="paymentReceiptImage">Payment Reciept</label>
                      <input
                        type="file"
                        name="paymentReceiptImage"
                        className="border-2 w-2/3"
                      />
                    </div>
                  </>
                )}
              </>
            )}
            {issueType === "Batch-Change" &&
              <>
                <div className="w-full border-2 flex justify-between">
                  <label htmlFor="courseList">Previous Course Name</label>

                  <input list="courseList" className="border-2 w-2/3" />
                  <datalist id="courseList">
                    {courses.map((courseName, id) => (
                      <option key={id} value={courseName}
                      />
                    ))}
                  </datalist>
                </div>
                <div>
                  <h1>{`Add ${linkToggler === "Link"
                    ? "Link"
                    : "Image Attachments"}`}</h1>
                  <p
                    className="cursor-pointer text-sm text-blue-500 inline-block"
                    onClick={() =>
                      linkToggler === "Link"
                        ? setLinkToggler("Image")
                        : setLinkToggler("Link")
                    }
                  >
                    {linkToggler === "Link"
                      ? "Add Image Attachments Instead"
                      : "Add Links Instead"}
                  </p>
                </div>
                <div className="w-full border-2 flex justify-between">
                  <label htmlFor="courseList">New Course Name</label>

                  <input list="courseList" className="border-2 w-2/3" />
                  <datalist id="courseList">
                    {courses.map((courseName, id) => (
                      <option key={id} value={courseName}
                      >
                        courseName
                      </option>
                    ))}
                  </datalist>
                </div>
                {linkToggler === "Link" ? (
                  <>
                    <div className="w-full border-2 flex justify-between">
                      <label htmlFor="paymentReceiptLink">Payment Reciept</label>
                      <input
                        type="text"
                        name="paymentReceiptLink"
                        className="border-2 w-2/3"
                      />
                    </div>
                  </>
                ) : (
                  <>
                    <div className="w-full border-2 flex justify-between">
                      <label htmlFor="paymentReceiptImage">Payment Reciept</label>
                      <input
                        type="file"
                        name="paymentReceiptImage"
                        className="border-2 w-2/3"
                      />
                    </div>
                  </>
                )}

              </>

            }
            {issueType === "Assignment" &&
              <div className="text-right">
                <label>
                  <input type="checkbox" checked={assignmentNotChecked}
                    onChange={() => setAssignmentNotChecked(prev => !prev)}
                  />
                  &nbsp;
                  Assigment Not Checked Issue?
                </label>

              </div>}
            {issueType === "Other" &&
              <div className="w-full border-2 flex justify-between">
                <label htmlFor="issueTitle">Add A Short Title</label>
                <input
                  type="text"
                  name="issueTitle"
                  className="border-2 w-2/3"
                />
              </div>
            }

            <div>
              <div className="w-full border-2 flex justify-between">
                <label htmlFor="handler">Handler</label>
                <div className="flex flex-col w-2/3">
                  <Autocomplete
                    options={allHandlersList}
                    getOptionLabel={(option) => option.name}
                    renderOption={(props, option, state) =>
                    (
                      <li
                        key={option._id}
                        onClick={() => {
                          setHandlersArray(prev => [...prev, option])
                          const filteredAllHandlersList = allHandlersList.filter(handler => handler._id !== option._id)
                          setAllHandlersList([...filteredAllHandlersList])
                        }}
                      >
                        <span>
                          {option.name}
                        </span>
                        &nbsp;
                        (<span>
                          {option.domain}
                        </span>
                        &nbsp;
                        <span>
                          {option.role}
                        </span>)

                      </li>
                    )
                    }
                    renderInput={(params) => (
                      <TextField
                        {...params}
                        label="Handlers" />
                    )}
                  />
                  <div>
                    {handlersArray.length !== 0 && handlersArray.map((handler, id) => (
                      <div
                        key={id}
                        className="mt-2 px-1 py-1 flex flex-row justify-between gap-1 border-2 rounded-lg bg-slate-200"
                      >
                        <div>

                          <span>
                            {handler.name}
                          </span>
                          &nbsp;
                          (<span>
                            {handler.domain}
                          </span>
                          &nbsp;
                          <span>
                            {handler.role}
                          </span>)
                        </div>
                        <div className="text-red-700 cursor-pointer"
                          onClick={() => {
                            const filteredHandlersArray = handlersArray.filter(filterHandler => filterHandler._id !== handler._id)
                            setHandlersArray([...filteredHandlersArray])
                          }}
                        >Remove</div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>



            </div>
            <div className="w-full border-2 flex justify-between">
              <h1>Attachments</h1>
              <button className="border-2">Add More</button>
            </div>
          </div>
          <div>
            <h1>Description</h1>
            <textarea
              name=""
              id=""
              cols="30"
              rows="10"
              className="border-2"
            ></textarea>
          </div>
        </div>
        <button className="border-2 float-right	mr-20 px-3 py-2">
          Create Ticket
        </button>
      </div >
    </>
  );
};

export default create;
